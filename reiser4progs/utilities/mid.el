;; message-ids

;;  - put mid.el somewhere in your emacs load-path
;;  - add to your .emacs:

;; (require 'mid)
;; (defvar mid-default-user "nikita") ;; change to your label
;; ;; choose some file where you want to store database of id-ranges used
;; ;; by developers
;; (defvar mid-file-name (expand-file-name "~/.midrc"))
;; ;; read this db.
;; (mid-read)

;;  - to initialize this database run something like (only once):
;; (mid-scan "PATH-TO-TOP-LEVEL-DIRECTORY-OF-REISER4-TREE/" ;; ends in slash
;;                   '("./balance.c" "./block_alloc.c"
;;                         "./crypt.c" "./flush.c"
;;                         "./interpolate.c" "./key.c" "./lock.c" "./namei.c"
;;                         "./inode.c" "./parser.c" "./search.c"
;;                         "./slum_track.c" "./super.c" "./sys_reiser4.c"
;;                         "./transcrash.c" "./tree.c" "./tree_walk.c"
;;                         "./wander.c" "./plugin/dir/hashed_dirs.c"
;;                         "./plugin/dir/dir.c" "./plugin/file/file.c"
;;                         "./plugin/plugin.c" "./plugin/item/direct.c"
;;                         "./plugin/item/static_stat.c"
;;                         "./plugin/item/item.c" "./plugin/item/extent.c"
;;                         "./plugin/item/internal.c" "./plugin/security/acl.c"
;;                         "./plugin/node/branch.c" "./plugin/node/leaf.c"
;;                         "./plugin/node/node.c" "./plugin/node/twig.c"
;;                         "./plugin/object.c" "./plugin/hash.c"
;;                         "./plugin/tail.c" "./bufmgr/bufmgr.c"
;;                         "./bufmgr/testbm1.c" "./bufmgr/iosched.c"
;;                         "./bufmgr/sinkmgr.c" "./bufmgr/testts1.c"
;;                         "./bufmgr/testzipf1.c" "./bufmgr/zipf.c"
;;                         "./bufmgr/testts2.c" "./bufmgr/txnmgr.c"
;;                         "./bufmgr/logmgr.c" "./io.c"
;;                         "./vfs_ops.c" "./znode.c" "./ulevel.c" "./debug.c"
;; 			"./uabend.c" "./oid.c" "./journal.c")
;; 		  '("nikita" "vs" "hans" "jmacd" "zam"))
;; (mid-write)

;;  - now you can use C-c-i to insert labels like "jmacd-33" and
;;    C-c-e to expand label "vs" to "vs-15000"
;;  - use (mid-buffer-expand) to decorate _all_ labels in buffer with
;;    error-ids (use with care).

(defvar mid-ids '() "representation of mental counter database as assoc-list")
(defvar mid-default-user "nikita")
(defvar mid-file-name (expand-file-name "~/.midrc"))

(defun mid-reg-id (user id)
  "register in a mental counter database information that USER has used error-id ID"
  (if (assoc user mid-ids)
	  (setcdr (assoc user mid-ids) (max (cdr (assoc user mid-ids)) id))
	(setq mid-ids (cons (cons user id) mid-ids))))


(defun mid-get-id (user)
  "return first mental counter not yet used by USER"
  (let ((id (if (assoc user mid-ids)
				(cdr (assoc user mid-ids)) 0)))
	(setq id (1+ id))
	(mid-reg-id user id)
	id))

(defun mid-file-scan (file user)
  "scan FILE and register all mental counters used by USER"
  (interactive)
  (switch-to-buffer (find-file-noselect file nil) t)
  (goto-char (point-min))
  (let ((rexp (concat "\"" user "-\\([0-9]+\\)\"")))
	(while (re-search-forward rexp nil t)
	  (mid-reg-id user (string-to-number (match-string 1 nil))))))

(defun mid-buffer-expand ()
  "blindly append suitable mental counter to all occurrences of MID-DEFAULT-USER string"
  (interactive)
  (goto-char (point-min))
  (while (search-forward mid-default-user nil t)
	(backward-char-nomark)
	(mid-expand)))

(defun mid-scan (topdir files users)
  "scan list of FILES, relative to TOPDIR and build mental counter database from them"
  (mapcar (lambda (file)
			(mapcar (lambda (user)
					  (mid-file-scan (concat topdir file) user)) users)) files))

(defun mid-expand ()
  "append unused mental counter to user name under point"
  (interactive)
  (let ((user (word-at-point)))
	(forward-word-nomark)
	(insert-string "-")
	(insert-string (number-to-string (mid-get-id user)))))

(defun mid-insert ()
  "insert user-mental-counter pair for MID-DEFAULT-USER at point"
  (interactive)
  (insert mid-default-user)
  (insert-string "-")
  (insert-string (number-to-string (mid-get-id mid-default-user))))

(defun mid-write ()
  "save mental counter database to the disk"
  (interactive)
  (save-excursion
    (set-buffer (get-buffer-create " *mid-write-file*"))
    (erase-buffer)
    (insert ";; -*- emacs-lisp -*-\n")
    (insert ";; This file has been automatically generated by the ")
    (insert "Emacs package `mid'.\n")
    (insert ";; Please use the `mid-read' to load it.\n\n")
	(insert "(setq mid-ids '")
	(print mid-ids (current-buffer))
	(insert ")\n")
    (write-region 1 (point-max) mid-file-name)
    (erase-buffer)))

(defun mid-read ()
  "read mental counter database from disk"
  (interactive)
  (load mid-file-name t nil))

(defun mid-kill-emacs-hook ()
  (mid-write))

(add-hook 'kill-emacs-hook 'mid-kill-emacs-hook)

(global-set-key [(control c) i] 'mid-insert)
(global-set-key [(control c) e] 'mid-expand)

(provide 'mid)
