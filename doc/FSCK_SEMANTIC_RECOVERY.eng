SEMANTIC & LOST+FOUND.

** Terms.

Base item - having this item plugin knows how to reach all other items. In the 
current implementation only compound directory items not having '.' and '..' 
are not base items.

Ambiguous object is one for which we cannot identify object plugin unambiguously.

** Requirements.

1. An object which inherits some property from the parent must have a pointer 
to that parent. 
2. Such a pointer is keeped in StatData of the object.
3. Object without a StatData inherits its properties from its semantic parent.

** Idea.

All objects are considered as lost initially. Just check that root dir exists
before the start. Then for any not CHECKED item try to recover the object,
recover its subtree, then try to reach and recover its parent and its parent
and so on and to recover the whole subtree of the last reachable parent.

If it is not possible to recover the object OBJ1 given its item, that is not a
base item, skip it for now. This (recovering) can be done later by trying to 
recover OBJ1's child or parent -- then we have a pointer to the StatData of
OBJ1 or some other item which is a base item of the object OBJ1.

Object inherits its properties from some another object (which has a StatData).
If pointer points to nowhere or not to StatData or to lost StatData, guess 
about this property.

On the Semantic pass recover objects given by their StatData items or by any 
base item if the object plugin can be identified umbigously. Then recover their
subtrees -- recover children given by their keys that should point to the very
first objects item.

On the lost+found pass, guess about the proper object plugin for not recovered
objects given by an item and choose the most appropriate even in the case of 
ambiguity. Not reachable objects link to lost+found.

** Algorithm.

1. Semantic pass.
(a) Object body recovery given an unCHECKED item or the pointer (object key) from
    some parent object.
    - If given by object key and key pointing to nowhere or not to the start of
    the object of all object plugins, skip object recovery, remove the link in the
    parent.
    - If given by item and it is not StatData and if plugin cannot be identified
    unambiguously, skip object recovery.
    - Othewise, try to recover the object by the identified object plugin with
    taken from StatData/inherited/guessed properties, mark all items as CHECKED.
    - After object recovery, if was given by its object key, mark start item as
    ATTACHED, nlink++.
(b) Run Semantic Recursive Traverse Pass from the object recovered at (a). This 
    goes through '.' and '..' and other names recovering pointed objects and 
    links to each other. If some object was checked already, skip the check and
    skip this object traversing, just increment its nlink and check link to the
    parent.

Result.
Everything that was linked to some objects or was recovered with all their subtrees.
There are left some objects which are not reachable from the root:
(a) recovered not marked as ATTACHED objects that parent pointers point to nowhere 
    or to (c);
(b) recovered not marked as ATTACHED objects that do not keep parent pointers with 
    their whole subtrees recovered but not been reached from some parent object;
(c) ambiguous objects that keep parent pointer.
 
2. Lost & found pass.  
(a) Take an not ATTACHED item, choose the most appropriate object plugin, recover 
    the object. Run Semantic Recursive Traverse Pass (Semantic pass, (b)).
    In contrast to Semantic pass, if some child is CHECKED but not ATTACHED,
    figure out if it is not linked to lost&found -- unlink it from there if so
    and link to the parent.
(b) Open an object given by some CHECKED item, if its start item is marked as 
    ATTACHED, link it to lost&found. Do not mark the start item as ATTACHED.

Objects without SD are skipped on the first pass - it is not clear which plugins they
are of, wait if they can be reached from some parent.

